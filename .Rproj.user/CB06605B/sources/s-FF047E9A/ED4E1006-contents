---
title: 'Project 1: Exploratory Data Analysis'
author: "Kenia E. Segura Aba"
date: '4/10/2020'
output:
  pdf_document:
    toc: no
  html_document:
    toc: yes
    toc_float:
      collapsed: no
      smooth_scroll: yes
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center", warning = F, message = F,
tidy=TRUE, tidy.opts=list(width.cutoff=60), R.options=list(max.print=100))
```

#### 0. Introduction

The Pan-Cancer initiative compared 12 tumor types profiled by The Cancer Genome Atlas (TCGA) Research Network to discover molecular aberrations at the DNA, RNA, protein and epigenetic levels and learn how they affect therapeutic response of cancer patients. The Pan-Cancer data set used in this project is a random sample of RNA-Seq gene expressions data of patients having different types of tumors: breast cancer (BRCA), kidney renal clear-cell carcinoma (KIRC), colon adenocarcinoma (COAD), lung adenocarcinoma (LUAD) and prostate adenocarcinoma (PRAD). The dataset was obtained from the University of California Irvine Machine Learning Repository. 

I chose this dataset because I want to learn how to pre_process genomics datasets. I do not intend to study cancer in the future, rather, I want to wade into plant or microbial genetics. The data set I will be working with has patient samples row-wise and individual gene expressions (attributes) column-wise. RNA-Seq gene expression levels were measured by Illumina HiSeq platform. I presume that cancers will differ between the tissues. Since the dataset did not include several tumors per tissue, I will not do a within-tissue analysis.

```{r}
# upload data
expression <- read.csv("~/Downloads/SDS 348 - Computational Biology/Datasets for SDS 348/TCGA-PANCAN-HiSeq/data.csv", header = T)
labels <- read.csv("~/Downloads/SDS 348 - Computational Biology/Datasets for SDS 348/TCGA-PANCAN-HiSeq/labels.csv", header = T)

# View expression
expression[1:5,1:5]

# View labels
head(labels, 5)
```

#### 1. Tidying: Rearranging Wide/Long

```{r}
library(tidyverse)

# untidy the data: pivot_longer(-1) is used to transpose every column except for the first one to a longer format in the expression dataset. In the labels dataset, unite() was used to combine entries in each row into a new variable called "Label".
untidy <- expression %>% pivot_longer(-1)
untidy2 <- labels %>% unite("Label")

# tidy the data: pivot_wider() was used to reverse pivot_longer(-1) and separate() reversed unite() and separated the variables back to "Sample" and "Class".
tidy <- untidy %>% pivot_wider()
tidy2 <- untidy2 %>% separate(Label, into = c("Sample", "Class"), sep = -4)
```

#### 2. Joining/Merging

```{r}
# join datasets
full <- labels %>% full_join(expression, by = "Sample")
```

I used full_join to combine the datasets by the `Sample` column in both datasets, therefore, no sample or attribute was dropped.

#### 3. Wrangling

Computing summary statistics:
```{r}
stats <- full %>% group_by(Class) %>% summarize_at(vars(gene_0:gene_16382), list(mean, sd, min, max))

reshaped <- stats %>% pivot_longer(-1) %>% separate(name, sep=-3, into=c("Gene","Statistic")) %>% pivot_wider(names_from="Gene", values_from="value") %>% mutate(Statistic = ifelse(as.character(Statistic) == c("fn1", "fn2", "fn3", "fn4"), c("mean", "sd", "min", "max"), as.character(Statistic)))

reshaped[1:5,1:5] %>% arrange()

# Suppose I only want a subset of the full data that only includes LUAD samples:
LUAD <- full %>% filter(Class == "LUAD") %>% select(Sample, gene_0:gene_16382)
```

#### 4. Visualizing


```{r}
# I will create a correlation matrix on a subset of my `full` matrix because otherwise the runtime is too long.
full[1:100,1:100] %>% select_if(is.numeric) %>% cor %>% as.data.frame %>% rownames_to_column %>% pivot_longer(-1) %>% ggplot(aes(rowname,name,fill=value)) + geom_tile() + xlab("") + ylab("")
```
Figure 1: Correlation heatmap of gene expression.



```{r}
full %>% pivot_longer(-1:-2) %>% ggplot(aes(x = Class, y = name, fill = value)) + 
  geom_tile() + xlab("Cancer Type") + ylab("Gene") + 
  ggtitle("Gene Expression Across Cancer Types") + theme(legend.title = element_text(size=10),       plot.title = element_text(size=14), axis.title = element_text(size=10, face="bold"), 
  axis.text.y = element_blank(), axis.text.x = element_text(size=8)) + labs(fill="GenExp")
```
Figure 2:

```{r}
full %>% pivot_longer(-1:-2) %>% ggplot(aes( x = Class, y = value)) + 
  stat_summary(fun.y = mean, geom = "bar") + stat_summary(fun.data = mean_cl_normal,
  geom = "errorbar", width = 0.25)
```
_Figure 3:_ 

```{r}
full %>% pivot_longer(-1:-2) %>% ggplot(aes(x = Class, y = value, fill = Class)) + geom_violin()
```
_Figure 4:_ 

```{r}

```
_Figure 5:_

- Create two effective, polished plots with ggplot
    - For at least one plot, add more tick marks (x, y, or both) than are given by default
    - For at least one plot, use the stat="summary" function
    - Supporting paragraph or two (for each plot) describing the relationships/trends that are apparent
    
    -  Create at least two additional plots of your choice with ggplot that highlight some of the more interesting findings that your descriptive statistics have turned up.
    - Each plot (besides the heatmap) should have at least three variables mapped to separate aesthetics
    - At least one plot should include `stat="summary"`
    - Each plot should include a supporting paragraph describing the relationships that are being visualized and any trends that are apparent
        - It is fine to include more, but limit yourself to 4. Plots should avoid being redundant! Four bad plots will get a lower grade than two good plots, all else being equal.
    - Make them pretty! Use correct labels, etc.

#### 5. Dimensionality Reduction
```{r}
# probably to figure out which k value to use
library(cluster)
sil_width<-vector() #empty vector to hold mean sil width for(i in 2:10){
kms <- kmeans(clust_dat,centers=i) #compute k-means solution sil <- silhouette(kms$cluster,dist(clust_dat)) #get sil widths sil_width[i]<-mean(sil[,3]) #take averages (higher is better)
} ggplot()+geom_line(aes(x=1:10,y=sil_width))+scale_x_continuous(name="k",breaks=1:10)
```
_Figure 6:_
- Either k-means/PAM clustering or PCA (inclusive "or") should be performed on at least three numeric variables in your dataset

    - All relevant steps discussed in class 
    - A visualization of the clusters or the first few principal components (using ggplot2)
    - Supporting paragraph or two describing results found 
- Include all steps as we discuss in class, including a visualization.

    - If you don't have at least 3 numeric variables, or you want to cluster based on categorical variables too, convert them to factors in R, generate Gower's dissimilarity matrix on the data, and do PAM clustering on the dissimilarities.
    
    - Show how you chose the final number of clusters/principal components 
    
    - Interpret the final clusters/principal components 

    - For every step, document what your code does (in words) and what you see in the data!     
