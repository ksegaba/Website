relfrqA <- indicator_Age$relfrq
relabuA <- indicator_Age$relabu
indvalA <- indicator_Age$indval
maxclsA <- data.frame(indicator_Age$maxcls)
indclsA <- data.frame(indicator_Age$indcls)
pvalA <- data.frame(indicator_Age$pval)
# export results
#write.csv(cbind(relfrqRY, relabuRY, indvalRY, maxclsRY, indclsRY, pvalRY), "~/Box/Summer 2018 TX Endo Field Samples and Analysis/Statistics/RRPP, PCA, PLSDA, Indicator Species, NMDS/Young_S_Sub_Neg/Indicator_Analys_Rain_ysn.csv")
# export results
write.csv(cbind(relfrqR, relabuR, indvalR, maxclsR, indclsR, pvalR), "~/Box/Summer 2018 TX Endo Field Samples and Analysis/Statistics/RRPP, PCA, PLSDA, Indicator Species, NMDS/Old+Young_L_Neg/indicator_rain_combined.csv")
write.csv(cbind(relfrqF, relabuF, indvalF, maxclsF, indclsF, pvalF), "~/Box/Summer 2018 TX Endo Field Samples and Analysis/Statistics/RRPP, PCA, PLSDA, Indicator Species, NMDS/Old+Young_L_Neg/indicator_fungus_combined.csv")
write.csv(cbind(relfrqA, relabuA, indvalA, maxclsA, indclsA, pvalA), "~/Box/Summer 2018 TX Endo Field Samples and Analysis/Statistics/RRPP, PCA, PLSDA, Indicator Species, NMDS/Old+Young_L_Neg/indicator_age_combined.csv")
knitr::opts_chunk$set(echo = TRUE)
bugs <- read.csv("~/Downloads/bugs.csv", head = T)
plot(bugs)
fit1 <- glm(Result ~ ., data = bugs, family = binomial(link = "logit"))
summary(fit1)
summary(fit1)
fit2 <- glm(Result ~ . + Species*Tree, data = bugs, family = binomial(link = "logit"))
summary(fit2)
knitr::opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
fit2 <- glm(Result ~ . -Length, data = bugs, family = binomial(link = "logit"))
summary(fit2)
fit3 <- glm(Result ~ Weight + Dosage + Species*Tree, data = bugs, family = binomial(link = "logit"))
summary(fit3)
coef(fit3)
plot(bugs, col = bugs$Result)
pairs(bugs, col = bugs$Result)
pairs(bugs, col = bugs$Dosage)
pairs(bugs, col = bugs$Result)
pairs(bugs)
pairs(bugs, col = bugs$Result)
plot(bugs, col = bugs$Result)
?pairs
plot(bugs, col = bugs$Result, pch = 19)
plot(bugs, col = bugs$Result, pch = 19, par(bg = "red"))
plot(bugs, col = bugs$Result, pch = 19, par(col = "red"))
plot(bugs, col = c("red",bugs$Result), pch = 19)
plot(bugs, col = c(bugs$Result), pch = 19)
plot(bugs, col = bugs$Result, pch = 19)
plot(bugs, col = bugs$Result, pch = 19, col = "red")
plot(bugs, col = bugs$Result, pch = 19, fill="red")
plot(bugs, col = bugs$Result, pch = 19, fill="blue")
plot(bugs, col = bugs$Result, pch = 19, fill=c("blue", "red"))
plot(bugs, col = bugs$Result, pch = 19, par(fill=c("blue", "red")))
plot(bugs, col = bugs$Result, pch = 19)
plot(bugs, col = bugs$Result, pch = 19, rainbow(2))
plot(bugs, col = bugs$Result, pch = 19)
summary(bugs)
bugs <- read.csv("~/Downloads/bugs.csv", head = T)
summary(bugs)
plot(bugs, col = bugs$Result, pch = 19)
fit2 <- glm(Result ~ . -Weight, data = bugs, family = binomial(link = "logit"))
anova(fit1,fit2)
anova(fit1,fit3)
anova(fit2,fit3)
fit3 <- glm(Result ~ Dosage + Species*Tree, data = bugs, family = binomial(link = "logit"))
fit3 <- glm(Result ~ Species*Tree, data = bugs, family = binomial(link = "logit"))
summary(fit3)
knitr::opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
bugs <- read.csv("~/Downloads/bugs.csv", head = T)
summary(bugs)
plot(bugs, col = bugs$Result, pch = 19)
fit1 <- glm(Result ~ ., data = bugs, family = binomial(link = "logit"))
summary(fit1)
fit2 <- glm(Result ~ . -Weight, data = bugs, family = binomial(link = "logit"))
summary(fit2)
fit3 <- glm(Result ~ Weight + Dosage + Species*Tree, data = bugs, family = binomial(link = "logit"))
summary(fit3)
plot(fit3)
bugs[79,]
bugs[119,]
# outlier: native lived on a pear tree
# actual: native species should die on pear tree when treated
predict(fit3, data.frame(Species=="Other"), Weight = 20)
predict(fit3, data.frame(Species=="Other"), Weight = 20, data = bugs)
predict(fit3, data.frame(bugsSpecies = "Other", Weight = 20))
predict(fit3, data.frame(Species = "Other", Weight = 20))
predict(fit3, data.frame(Dosage, Weight = 20))
fit3 <- glm(Result ~ Weight + Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
predict(fit3, data.frame(Dosage, Weight = 20))
predict(fit3, data.frame(Tree, Weight = 20))
predict(fit3, data.frame(Tree = Pear, Weight = 20))
predict(fit3, Weight = 20)
predict(fit3, data.frame(Tree="Pear", Weight = 20))
predict(fit3)
predict(fit3, Tree="Pear")
predict(fit3, data.frame(Tree="Pear",weight=20))
predict(fit3, weight=20)
predict(fit3, weight=20)[Species=="Other,"]
predict(fit3, weight=20)[Species=="Other",]
data.frame(predict(fit3, weight=20))[Species=="Other",]
predict(fit3, newdata = data.frame(Species="Other",weight=20))
predict(fit3, newdata = data.frame(Species="Other",Weight=20))
predict(fit3, newdata = data.frame(Species="Other",Weight=20, Dosage))
predict(fit3, newdata = data.frame(bugs$Species="Other",bugs$Weight=20, bugs$Dosage))
predict(fit3, newdata = data.frame(Weight=20))
predict(fit3, Weight=20)
summary(predict(fit3, Weight=20))
predict(fit3, Weight=20)
View(bugs)
library(dplyr)
predict(fit3, Weight=20) %>% group_by(bugs$Species) %>% summarize(mean)
predict(fit3, Weight=20) %>% group_by(bugs$Species) %>% summarize()
predict(fit3, Weight=20)
predict(fit3, data.frame(Species="Native",Weight=20))
fit3 <- glm(Result ~ Weight + Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
fit3 <- glm(Result ~ Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
predict(fit3, data.frame(Species="Native",Weight=20))
predict(fit3, Species="Native")
predict(fit3, Weight=20)
predict(fit3, Weight=20) %>% summarize_at(1:100, mean)
predict(fit3, Weight=20) %>% summarize_at(1:100, mean())
predict(fit3, Weight=20) %>% typeof()
predict(fit3, Weight=20) %>% data.frame() %>% typeof()
predict(fit3, Weight=20) %>% data.frame() %>% summarize_at(1:100, mean)
predict(fit3, Weight=20) %>% data.frame() %>% summary
predict(fit3, Weight=20) %>% data.frame() %>% summary(1:100)
predict(fit3, Weight=20) %>% data.frame() %>% summary(200:300)
predict(fit3, bugs[Weight==20,])
predict(fit3, bugs[bugs$Weight==20,])
predict(fit3, bugs[bugs$Weight==20])
predict(fit3, bugs[,bugs$Weight==20])
predict(fit3, bugs[bugs$Weight==20,])
predict(fit3, bugs[c(bugs$Weight==20, Species=="Native"),])
predict(fit3, bugs[c(bugs$Weight==20, bugs$Species=="Native"),])
predict(fit3, bugs[bugs$Species=="Native",])
predict(fit3, bugs[bugs$Weight==20,])
fit3 <- glm(Result ~ Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
confint(fit3)
confint(fit3, 0.5)
#LD50 dosage makes logit equal to zero
predict(fit3, data.frame(Tree="Apple", Weight=20, Dosage=10))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=10))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=30))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=28))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.5))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.4))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.35))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.325))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.335))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.333))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.334))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3333))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.333))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.33))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.32))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.321))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3212))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3213))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3214))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3215))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3217))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3219))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.329))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.327))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.328))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.3274))
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.33))
fit3 <- glm(Result ~ Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
fit2 <- glm(Result ~ . - Length, data = bugs, family = binomial(link = "logit"))
summary(fit2)
fit3 <- glm(Result ~ . - Length + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
bugs[79,]
2.70935+(0.92617)+(-0.45255*20)+(0.197*27)
2.70935+(0.92617)+(-0.45255*20)+(0.197*27.33)
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.33))
fit3 <- glm(Result ~ . - Length + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
predict(fit3, data.frame(Tree="Apple", Species="Other",Weight=20, Dosage=27.33))
fit3 <- glm(Result ~ Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
fit3 <- glm(Result ~ . -Length + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
fit3 <- glm(Result ~ Weight + Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
fit3 <- glm(Result ~ . -Length + Dosage + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
fit3 <- glm(Result ~ . -Length + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage=27.33))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 10, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.33, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.5, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.4, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.45, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.48, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.49, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Native", Weight=20, Dosage = 27.49, Length = 10))
exp(3.435117e-05 )
log(3.435117e-05)
exp(3.435117e-05)
predict(fit3, data.frame(Tree="Apple", Species="Native", Weight=20, Dosage = 37.49, Length = 10))
predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.49, Length = 10))
# how does the selected dosage affect the native species?
predict(fit3, data.frame(Tree="Apple", Species="Native", Weight=20, Dosage = 27.49, Length = 10))
# odds that other dies
exp(3.435117e-05)
# odds that native lives
exp(-0.92614)
# odds that other dies
exp(3.435117e-05)
1.000034/(1-1.000034)
3.435117e-05/(1-3.435117e-05)
1.000034/(1+1.000034)
# probability function
p <- function(odds){odds/odds+1}
logodds <- predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.49, Length = 10)) # log odds
p(logodds)
logodds <- predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.49, Length = 10)) # log odds
p(exp(logodds))
# probability function
p <- function(odds){odds/odds+1}
logodds <- predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.49, Length = 10))
p(exp(logodds))
# probability function
p <- function(odds){odds/(odds+1)}
p(exp(logodds))
# how does the selected dosage affect the native species?
logodds2 <- predict(fit3, data.frame(Tree="Apple", Species="Native", Weight=20, Dosage = 27.49, Length = 10))
p(exp(logodds2))
# odds ratio
exp(logodds)/exp(logodds2)
# odds ratio
p(exp(logodds)/exp(logodds2))
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 27.49, Length = 10))
p(logodds3)
p(exp(logodds3))
# odds ratio
p(exp(logodds)/exp(logodds2))
# odds ratio
exp(logodds)/exp(logodds2)
library(dplyr)
knitr::opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
bugs <- read.csv("~/Downloads/bugs.csv", head = T)
summary(bugs)
plot(bugs, col = bugs$Result, pch = 19)
fit1 <- glm(Result ~ ., data = bugs, family = binomial(link = "logit"))
summary(fit1)
fit2 <- glm(Result ~ . - Length, data = bugs, family = binomial(link = "logit"))
summary(fit2)
fit3 <- glm(Result ~ . -Length + Species*Tree, data = bugs, family = binomial(link = "logit")) ; summary(fit3)
# probability function
p <- function(odds){odds/(odds+1)}
# how does the dosage affect the other species?
logodds <- predict(fit3, data.frame(Tree="Apple", Species="Other", Weight=20, Dosage = 27.49, Length = 10))
p(exp(logodds))
# how does the selected dosage affect the native species?
logodds2 <- predict(fit3, data.frame(Tree="Apple", Species="Native", Weight=20, Dosage = 27.49, Length = 10))
p(exp(logodds2))
# odds ratio
exp(logodds)/exp(logodds2)
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 40, Length = 10))
p(exp(logodds3))
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 30, Length = 10))
p(exp(logodds3))
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 30\7, Length = 10))
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 37, Length = 10))
p(exp(logodds3))
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Native", Weight=20, Dosage = 37, Length = 10))
p(exp(logodds3))
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 27.49, Length = 10))
p(exp(logodds3))
p(exp(predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 27.49, Length = 10)))
p(exp(predict(fit3, data.frame(Tree="Pear", Species="Native", Weight=20, Dosage = 27.49, Length = 10)))
p(exp(predict(fit3, data.frame(Tree="Pear", Species="Native", Weight=20, Dosage = 27.49, Length = 10))))
logodds3 <- predict(fit3, data.frame(Tree="Pear", Species="Other", Weight=20, Dosage = 17.49, Length = 10))
p(exp(logodds3)) # invasive species
install.packages("knitr")
install.packages("tidyverse")
install.packages("lmtest")
install.packages('sandwich')
install.packages("glmnet")
install.packages("plotROC")
blogdown::serve_site()
install.packages("blogdown")
getwd()
setwd("~/Website/")
getwd()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
```
install.packages("reticulate")
library(reticulate) # load the package onto our current R session
```
### Running Python
something<-"hi"
print(something)
Now, let's import the seaborn python library.
```
import seaborn as sns
import seaborn as sns
```
sns <- import('seaborn')
plt <- import('matplotlib.pyplot')
pd <- import('pandas')
```
### The Home Page
Y
Now that we're all setup, lets load an R built-in dataset, ```mtcars```.
```
data <- datasets::mtcars
```
Now that we're all setup, lets load an R built-in dataset, ```mtcars```.
```
data <- datasets::mtcars
```
Now that we're all setup, lets load an R built-in dataset, ```mtcars```.
```
data <- data(mtcars)
```
Now that we're all setup, lets load an R built-in dataset, ```mtcars```.
```
data <- data('mtcars')
```
Now that we're all setup, lets load an R built-in dataset, ```mtcars```.
```
data <- data('mtcars')
```
Now that we're all setup, lets load an R built-in dataset, ```mtcars```.
```
data <- data('mtcars')
head(mtcars)
```
```
sns$heatmap(r_to_py(data), fmt="g", cmap ='viridis')
```
### Site Configuration File
```
sns <- import('seaborn')
plt <- import('matplotlib.pyplot')
pd <- import('pandas')
```
### Seaborn Heatmap in R
```
sns <- import('seaborn')
plt <- import('matplotlib.pyplot')
pd <- import('pandas')
```
### Seaborn Heatmap in R
sns <- import('seaborn')
```
# install python packages
py_install('seaborn')
py_install('matplotlib')
py_install('pandas')
# import the python libraries
sns <- import('seaborn')
plt <- import('matplotlib.pyplot')
pd <- import('pandas')
```
### Seaborn Heatmap in R
```
sns$heatmap(r_to_py(data), fmt="g", cmap ='viridis')
```
### Site Configuration File
View(mtcars)
heatmap(mtcars)
heatmap(as.matrix(mtcars))
remove(mtcars)
remove(data)
```
data_url = 'http://bit.ly/2cLzoxH'
gapminder = pd.read_csv(data_url)
print(gapminder.head(3))
```
```
data_url <- 'http://bit.ly/2cLzoxH'
gapminder = pd.read_csv(data_url)
print(gapminder.head(3))
```
```
data_url <- 'http://bit.ly/2cLzoxH'
gapminder <- pd.read_csv(data_url)
print(gapminder.head(3))
```
View(pd)
```
data_url <- 'http://bit.ly/2cLzoxH'
gapminder <- pandas.read_csv(data_url)
print(gapminder.head(3))
```
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
blogdown::serve_site()
blogdown::serve_site()
```{python}
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
```
# install python packages
py_install('seaborn')
# import the python libraries
sns <- import('seaborn')
plt <- import('matplotlib.pyplot')
pd <- import('pandas')
```
### Seaborn Heatmap in R
```{python}
data_url = 'http://bit.ly/2cLzoxH'
gapminder = pd.read_csv(data_url)
print(gapminder.head(3))
```
pd$listdir(".")
# import the python libraries
sns <- import("seaborn")
plt <- import("matplotlib.pyplot")
pd <- import("pandas")
```
### Seaborn Heatmap in R
```
data_url = 'http://bit.ly/2cLzoxH'
gapminder = pd$read_csv(data_url)
print(head(gapminder,3))
```
View(gapminder)
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
update.packages(ask = FALSE, checkBuilt = TRUE)
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center", warning = F, message = F, tidy=TRUE, tidy.opts=list(width.cutoff=60), R.options=list(max.print=100))
# install python packages
# py_install('seaborn')
# import the python libraries
sns <- import("seaborn")
plt <- import("matplotlib.pyplot")
pd <- import("pandas")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(fig.align="center", fig.height=5, message=FALSE, warning=FALSE, fig.width=8, tidy.opts=list(width.cutoff=60),tidy=TRUE)
path <- "~/Box/Summer 2018 TX Endo Field Samples and Analysis/Statistics/Kenia_Thesis_Analysis/"
L_neg <- read_tsv(paste(path,"XCMS Online Results/Pairwise High vs Low/HvL_L_neg/XCMS.annotated.diffreport..High_F_Lneg_Kenia_Thesis.vs.Low_F_Lneg_Kenia_Thesis.tsv", sep=""))
library(tidyverse)
library(readr)
library(RRPP)
library(mixOmics)
library(labdsv)
L_neg <- read_tsv(paste(path,"XCMS Online Results/Pairwise High vs Low/HvL_L_neg/XCMS.annotated.diffreport..High_F_Lneg_Kenia_Thesis.vs.Low_F_Lneg_Kenia_Thesis.tsv", sep=""))
View(L_neg)
# dependent variable: metabolite intensities
Y <- L_neg[,c(9,23:111)] %>% data.frame(row.names=1) %>% t %>% data.frame()
View(Y)
# dependent variable: metabolite intensities
Y <- L_neg[,c(9,23:108)] %>% data.frame(row.names=1) %>% t %>% data.frame()
View(Y)
scaled_Y <- scale(Y)
View(Y)
path <- "~/Box/Summer 2018 TX Endo Field Samples and Analysis/Statistics/Kenia_Thesis_Analysis/XCMS Online Results/Pairwise High vs Low/"
# class: sample factors
class <- read.csv(paste(path,"HvL_class.csv", sep=""), header = T, row.names = 1)
View(class)
# class: sample factors
class <- read.csv(paste(path,"HvL_class.csv", sep=""), header = T, row.names = 1)
LMneg <- lm.rrpp(scaled_Y ~ Block * Water * Fungus * Age, data = class, SS.type = "III", print.progress = F); summary(LMneg)
View(class)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals")) ; summary(ANOVAneg, formula = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals", "Residuals", "Residuals")) ; summary(ANOVAneg, formula = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals", "Residuals", "Residuals", "Residuals")) ; summary(ANOVAneg, formula = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals")) ; summary(ANOVAneg, formula = T)
coef(LMneg)
coef(LMneg, test = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals")) ; summary(ANOVAneg, formula = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals")) ; summary(ANOVAneg, formula = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals")) ; summary(ANOVAneg, formula = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals", "Residuals")) ; summary(ANOVAneg, formula = T)
## Old Leaves
ANOVAneg <- anova(LMneg, effect.type = "F", error = c("Residuals", "Block:Water", "Block:Water:Fungus", "Block:Water:Fungus:Age", "Residuals", "Block:Water:Fungus", "Block:Water:Fungus", "Block:Water:Fungus:Age", "Block:Water:Fungus:Age", "Block:Water:Fungus:Age", "Residuals", "Block:Water:Fungus:Age", "Block:Water:Fungus:Age", "Block:Water:Fungus:Age", "Residuals")) ; summary(ANOVAneg, formula = T)
negcoef <- coef(LMneg, test = T) ; summary(negcoef)
# residuals vs fitted values (homoscedasticity check)
Odiagnostics <- plot(LMneg, type = "diagnostics")
# linear regression plot
Oregression <- plot(LMneg, type = "regression", predictor = class$Fungus, reg.type = "RegScore")
# linear regression plot
Oregression <- plot(LMneg, type = "regression", predictor = class$Fungus, reg.type = "PredLine")
# linear regression plot
Oregression <- plot(LMneg, type = "regression", predictor = class$Water, reg.type = "RegScore")
# residuals vs fitted values (homoscedasticity check)
Odiagnostics <- plot(LMneg, type = "diagnostics")
# pca plot
Opcplot <- plot(LMneg, type = "PC", pch = 19, col = interaction(class$Water, class$Fungus))
pred <- predict(LMneg) ; plot(pred, PC = T, ellipse = T)
predict(LMneg) ; plot(pred, PC = T, ellipse = T)
predict(LMneg)
negpw <- pairwise(LMneg, groups = class$Fungus); summary(negpw, confidence = 0.95, stat.table = T)
# fungus
negpw <- pairwise(LMneg, groups = class$Fungus); summary(negpw, confidence = 0.95, stat.table = T)
